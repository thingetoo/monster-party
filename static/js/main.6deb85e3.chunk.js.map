{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAGaA,G,YAAO,SAACC,GAAD,OAChB,cAD6B,CAC7B,OAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,aADyC,CACxC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACNa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCHG,E,kDArCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOjC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAjCZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6deb85e3.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => ( // monster prop is used to generate the image, name and email\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2> \n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = props => {\n    return (\n        <div className='card-list'>\n            {props.monsters.map(monster => (         // passed down monsters as a prop // and filtered over the past down monsters\n            <Card key={monster.id} monster={monster}/> // returns a card component with key and monster prop\n            ))}\n        </div>\n    )\n}","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n    className='search'\n        type=\"search\" \n        placeholder={placeholder} \n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    } \n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\") // API to get names\n    .then(response => (response.json()))\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = e => { // This function will update the searchField state to the value that is typed \n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state; // Destructuring so that we don't need to add the this.state... before our consts\n    // const monsters = this.state.monsters; -> similar to the above\n    // const searchField= this.state.searchField; -> similar to the above\n    const filteredMonsters = monsters.filter(monster =>  // this function will filter through the monster names returning what is included in the searchField\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>Monster Party</h1>\n        <SearchBox\n          placeholder='search monsters' // what the input box will display before typing occurs\n          handleChange = {this.handleChange} // calls the handleChange function to update the state as the value is typed\n        />\n        <CardList monsters = {filteredMonsters}/> \n      </div>// the above will return only the monsters that have been filtered\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}